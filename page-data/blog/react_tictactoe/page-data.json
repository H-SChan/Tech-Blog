{"componentChunkName":"component---src-template-post-page-jsx","path":"/blog/react_tictactoe/","result":{"data":{"markdownRemark":{"html":"<h1>⚛️React.js Standard</h1>\n<blockquote>\n<h3>⚠️ 이 글은 React.js 공식 자습서에 의존하고 있는 글입니다.</h3>\n</blockquote>\n<p>아래의 사진은 공식 자습서에서 설명하고 있는 문구입니다.\n<img src=\"https://user-images.githubusercontent.com/48292190/116520103-3c85c200-a90d-11eb-8f19-a33faeaadd10.png\" alt=\"image\"></p>\n<p><strong>그만큼 쉬우신 거지~</strong></p>\n<p><img src=\"https://blog.kakaocdn.net/dn/biT2IR/btqZ4AhxqLX/TQCSmdNKu1ZtDaHYVbNcBK/img.png\" alt=\"무야호\"></p>\n<p>그럼 한번 시작해볼까요?</p>\n<h1>🤨시작하기에 앞서...</h1>\n<p>리액트의 공식 자습서에서는 리액트를 이용해서 간단한 게임을 만드는데, 게임을 만들고 싶지 않아도 한번 해보는게 도움이 된다고 합니다...<strong>공식 문서에서 강조하는 내용이니만큼 집중해서 해보겠습니다!</strong></p>\n<p>⭐️ 이번 예제를 통해 배우는 내용은</p>\n<ul>\n<li>React의 기본(components, props, state)</li>\n<li>일반적인 테크닉</li>\n<li>깊은 통찰력</li>\n</ul>\n<p>등을 배울 예정입니다.</p>\n<blockquote>\n<p>🔥 자습서의 코드를 복사 붙여넣기 하는거보다, 직접 써보면서 하는 방식을 추천드립니다!</p>\n</blockquote>\n<p>우리가 최종적으로 만들 게임은 <a href=\"https://codepen.io/gaearon/pen/gWWZgR?editors=0010\">여기</a> 있습니다.</p>\n<p><strong>참고로 class형 컴포넌트를 사용하더라구요... 요즘에는 function형 컴포넌트를 많이 사용한답니다!</strong> 그래도 class형도 알면 좋으니 한번 따라해보도록 하죠!</p>\n<h3>😝 틱택토 게임 해보셨나요?</h3>\n<p>했든 안했든 우리가 만들 게임이기 때문에 한번쯤은 플레이 해보는것을 추천드립니다!</p>\n<p><a href=\"https://www.google.com/search?q=%ED%8B%B1%ED%83%9D%ED%86%A0+%EA%B2%8C%EC%9E%84&#x26;rlz=1C5CHFA_enKR950KR950&#x26;oq=%ED%8B%B1%ED%83%9D%ED%86%A0+%EA%B2%8C%EC%9E%84&#x26;aqs=chrome.0.0l10.2290j0j4&#x26;sourceid=chrome&#x26;ie=UTF-8\">틱택토게임 직접 해보기</a></p>\n<h3>🥶 리액트를 배우기 전에 필요한 지식</h3>\n<p>우리가 리액트를 하기 전에 넘어야할 산이 있습니다! (사실 그렇게 높은 산은 아니예요)\n바로 <strong>HTML</strong> , <strong>JavaScript</strong>입니다.\n완전 잘 할 필요는 없습니다. 그냥 기본만 알고있으면 충분히 할 수 있습니다!</p>\n<p>(함수, 객체, 배열, 가능하다면 클래스 같은 프로그래밍 개념을 알고있어야합니다.)</p>\n<h3>React란?</h3>\n<p>리액트는 선언적이고 효율적인 JavaScript 라이브러리입니다.\n<strong>컴포넌트</strong>라고 불리는 작고 고립된 코드의 파편을 이용하여 복잡한 UI를 구성합니다.</p>\n<deckgo-highlight-code jsx  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport &quot;./styles.css&quot;;\n\nclass ShoppingList extends React.Component {\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;h1&gt;{this.props.name}&#39;s Shopping List&lt;/h1&gt;\n        &lt;ul&gt;\n          &lt;li&gt;Instagram&lt;/li&gt;\n          &lt;li&gt;WhatsApp&lt;/li&gt;\n          &lt;li&gt;Oculus&lt;/li&gt;\n        &lt;/ul&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nexport default ShoppingList;</code>\n        </deckgo-highlight-code>\n<p>쇼핑리스트라는 컴포넌트를 만들어서 복잡?한 UI를 단순화시킬 수 있습니다.</p>\n<p>우리는 컴포넌트를 사용하여 React에게 화면에 표현하고 싶은 것이 무엇인지 알려줍니다.</p>\n<p><strong>데이터가 변경될때 React는 효율적으로 업데이트를 하고 다시 렌더링합니다.</strong></p>\n<p>🤨 아직 효율적에 대해서 아직은 생각하지 맙시다...우리는 리액트에 기능에 좀 더 집중하도록 하자구요.</p>\n<p>우리가 return{} 문 안에 html과 유사하게 생긴 코드를 볼 수 있을텐데 왜 <strong>유사하다</strong>라고 했냐면 <code>JSX</code>라는 문법입니다... html이 아닌것이지요!</p>\n<p>그럼 JSX가 html로 변환하는 과정은 어떻게 이루어질까요?\n다음과 같이 동작합니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">return React.createElement(\n  &quot;div&quot;,\n  { className: &quot;shopping-list&quot; },\n  React.createElement(&quot;h1&quot; /* ... h1 children ... */),\n  React.createElement(&quot;ul&quot; /* ... ul children ... */)\n);</code>\n        </deckgo-highlight-code>\n<p>좀 더 자세히 볼까요?</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116552443-fdb73280-a933-11eb-9499-54e3ad76f87e.png\" alt=\"image\"></p>\n<p>😊 결국엔 리액트도 JS라는게 다시하번 느껴지죠?</p>\n<p>JSX 내부의 중괄호 안에 어떤 JavaScript 표현식도 사용할 수 있습니다.</p>\n<p>무슨말인지 자세히 알아보도록 할까요?</p>\n<p>우리가 JSX를 html태그만 사용했었는데 DOM컴포넌트도 렌더링할 수 있지만, Custom React Component도 사용할 수 있습니다.</p>\n<p>무슨소리인지 잘 모르시겠다구요? 자세히 알아보도록 합시다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116553859-897d8e80-a935-11eb-9d2c-8fd6dcc54092.png\" alt=\"image\"></p>\n<p>이렇게 동작하게 되는것이죠!</p>\n<h2>🤫 초기코드 살펴보기</h2>\n<p>공식 자습서에서 설명하는 코드인 <a href=\"https://codepen.io/gaearon/pen/oWWQNa?editors=0010\">여기</a>에서 한번 코드를 살펴보도록 하겠습니다.</p>\n<p><code>src/index</code>를 열어주세요</p>\n<p>코드를 살펴보면 세 가지의 React 컴포넌트를 확인할 수 있습니다.</p>\n<ul>\n<li>Square</li>\n<li>Board</li>\n<li>Game</li>\n</ul>\n<p><code>Square</code>컴포넌트는 button을 렌더링하고,</p>\n<p><code>Board</code>컴포넌트는 사각형 9개를 렌더링합니다.</p>\n<p>마지막으로 <code>Game</code> 컴포넌트는 게임판을 렌더링하며 나중에 수정할 자리 표시자 값을 가지고 있습니다.</p>\n<h2>Props를 통해 데이터 전달하기</h2>\n<blockquote>\n<h3>⚠️여러분은 예제 사이트(미완성 된 코드)에서 내용을 추가하면 됩니다.</h3>\n</blockquote>\n<p><strong>코드를 절대로! 복사 붙여넣기 하지 마세요! 그냥 따라치면서 익힙시다.</strong></p>\n<p>Square에 value prop을 전달하기 위해 Board의 renderSquare함수 코드를 작성해봅시다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Board extends React.Component {\n  renderSquare(i) {\n    return &lt;Square value={i} /&gt;;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>이제 값을 표시하기 위해 render함수에서 {this.props.value}를 추가해줍시다!</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Square extends React.Component {\n  render() {\n    return &lt;button className=&quot;square&quot;&gt;{this.props.value}&lt;/button&gt;;\n  }\n}</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116555543-7c619f00-a937-11eb-860e-a01b45d9ffe4.png\" alt=\"image\"></p>\n<p>그럼 다음과 같이 각 Square에 value가 잘 전달된것을 볼 수 있습니다!</p>\n<p>이제 Props의 전달입니다!</p>\n<p><code>Board</code>컴포넌트에서 -> <code>Square</code>컴포넌트로 <strong>부모 컴포넌트에서 자식 컴포넌트로</strong> 값을 전달한것이지요!</p>\n<h2>사용자와 상호작용 하는 컴포넌트 만들기</h2>\n<p><code>Square</code>컴포넌트를 클릭하면 \"X\"가 체크되도록 해보겠습니다!</p>\n<p>그러면 <code>click</code>했을때에 어떠한 동작을 해주어야겠죠?</p>\n<p>어떻게 하는지 보도록 하겠습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Square extends React.Component {\n  render() {\n    return (\n      &lt;button\n        className=&quot;square&quot;\n        onClick={() =&gt; {\n          alert(&quot;click&quot;);\n        }}\n      &gt;\n        {this.props.value}\n      &lt;/button&gt;\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p><code>onClick</code>이라는 속성을 button컴포넌트에 주도록 합시다.</p>\n<p>그러면 함수를 받게되는데 그때 alert하는 로직을 작성해주게 되는겁니다.</p>\n<p>그렇게 어려운 내용은 아니지요?</p>\n<p>Square 컴포넌트를 클릭한 것을 <strong>“기억하게”</strong> 만들어 “X” 표시를 채워 넣으려고 합니다.</p>\n<p>음...**\"기억하게\"**라고 하니까 감이 안오죠?</p>\n<p>무언가를 “기억하기”위해 component는 <strong>state</strong>를 사용합니다.</p>\n<p>새로운 개념이 나왔습니다! <strong>state</strong></p>\n<p>클래스형 컴포넌트는 <code>this.state</code>로 접근할 수 있습니다.</p>\n<p>한번 예제를 볼까요?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Square extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: null,\n    };\n  }\n\n  render() {\n    return (\n      &lt;button className=&quot;square&quot; onClick={() =&gt; alert(&quot;click&quot;)}&gt;\n        {this.props.value}\n      &lt;/button&gt;\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>생성자 (constructor)를 이용해서 state를 초기화합니다.</p>\n<blockquote>\n<h1>JavaScript클래스 super</h1>\n<p>JavaScript 클래스에서 하위 클래스의 생성자를 정의할 때 항상 super를 호출해야 합니다. 즉 모든 리액트 컴포넌트는 React.Component 클래스를 상속받으므로 <code>super(props)</code>을 반드시 작성해야 합니다.</p>\n</blockquote>\n<p>이제 클릭하면 박스안에 값이 X로 바뀌게 구현해보겠습니다.</p>\n<p>이제 setState를 통해 state를 업데이트 해주도록 하겠습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">render() {\n    return (\n      &lt;button className=&quot;square&quot; onClick={() =&gt; {\n          this.setState({\n            value: &#39;x&#39;\n          })\n        }}&gt;\n        {this.state.value}\n      &lt;/button&gt;\n    );\n  }</code>\n        </deckgo-highlight-code>\n<p>이렇게 되면 다음과 같이 누르면 X가 잘 업데이트가 될겁니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116779507-7f809a80-aab1-11eb-8911-8ec9bd52d63b.png\" alt=\"image\"></p>\n<p>여기서 setState되는 과정이 이해를 못하실 수도 있습니다. 하지만 걱정하지 마세요. 나중에 더 자세히 설명해드리겠습니다.</p>\n<p>이제 해야할 작업이 무엇일까요?</p>\n<h1>🙆‍♂️ 게임 완성하기</h1>\n<blockquote>\n<p>완전한 게임을 위해 게임판의 “X”와 “O”를 번갈아 표시할 필요가 있으며 승자를 결정하는 방법이 필요합니다.</p>\n</blockquote>\n<p>차근차근 해보도록 하겠습니다.</p>\n<p>각 Square가 아닌 부모 Board 컴포넌트에 게임의 상태를 저장하는 것이 가장 좋은 방법입니다.</p>\n<p>Board컴포넌트에 생성자를 추가하고 9개의 사각형에 9개의 null배열을 초기 state로 설정을 해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Board extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      squares: Array(9).fill(null),\n    };\n  }\n\n  renderSquare(i) {\n    return &lt;Square value={i} /&gt;;\n  }</code>\n        </deckgo-highlight-code>\n<p>그러면 나중에 Board를 채울때 다음과 같은 배열의 형태일것입니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">[&quot;O&quot;, null, &quot;X&quot;, &quot;X&quot;, &quot;X&quot;, &quot;O&quot;, &quot;O&quot;, null, null];</code>\n        </deckgo-highlight-code>\n<p>현재 renderSquare의 상태는</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\"> renderSquare(i) {\n    return &lt;Square value={i} /&gt;;\n  }</code>\n        </deckgo-highlight-code>\n<p>다음과 같은 형태일텐데, 이를 수정해주어야합니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">  renderSquare(i) {\n    return &lt;Square value={this.state.squares[i]}/&gt;;\n  }</code>\n        </deckgo-highlight-code>\n<p>그러면 이제 위에서 생성자를 이용해서 선언했던 state의 null값이 정상적으로 들어갔을겁니다.</p>\n<blockquote>\n<p>Square는 이제 빈 사각형에 'X', 'O', 또는 null인 value prop을 받습니다.</p>\n</blockquote>\n<p>Board에서 Square로 함수를 전달하고 Square는 사각형을 클릭할 때 함수를 호출할 것입니다.</p>\n<p>다음과 같이 작성해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">renderSquare(i) {\n    return (\n      &lt;Square\n        value={this.state.squares[i]}\n        onClick={() =&gt; this.handleClick(i)}\n      /&gt;\n    );\n  }</code>\n        </deckgo-highlight-code>\n<p>이제 Board에서 <code>Square</code>로 <code>value</code>와 onClick 두 개의 props를 전달하였습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Square extends React.Component {\n  render() {\n    return (\n      &lt;button className=&quot;square&quot; onClick={() =&gt; this.props.onClick()}&gt;\n        {this.props.value}\n      &lt;/button&gt;\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>그러면 Square컴포넌트는 이렇게 수정하면 됩니다.\n<code>constructor</code>가 없어졌는데, props로 값을 받기때문에 <code>constructor</code>의 필요성이 없어진 것입니다.</p>\n<p>그리고 <code>onClick</code>에 전달해준 <code>handleClick</code>이라는 함수는 아직 정의해주지 않았으니, 이제 차차 해보도록 하겠습니다.</p>\n<blockquote>\n<p>지금은 \"this.handleClick is not a function\"이라는 문구가 뜰 것입니다.</p>\n</blockquote>\n<blockquote>\n<h1>이벤트 이름 작성 팁</h1>\n<p>React에서 이벤트를 나타내는 prop에는 on[Event], 이벤트를 처리하는 함수에는 handle[Event]를 사용하는 것이 일반적입니다.</p>\n</blockquote>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = &#39;X&#39;;\n    this.setState({squares: squares});\n  }</code>\n        </deckgo-highlight-code>\n<p>이제 실행결과를 확인해보면 원래 작업과 동일하다는걸 알 수 있을겁니다.\n하지만 다른점은 <strong>부모 컴포넌트에서 값을 관리한다는 것이죠.</strong></p>\n<p>Board의 상태가 변할때마다 Square컴포넌트는 자동으로 랜더링 해줍니다.</p>\n<p>로직이 이해안되는 사람들이 있을겁니다...! 하지만 한번 알아보도록 하죠.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const squares = this.state.squares.slice();</code>\n        </deckgo-highlight-code>\n<p>이 부분은 <code>.slice()</code>를 사용함으로써 기존 배열을 수정하지 않고 <code>squares</code>의 배열을 복사하는 부분입니다. 왜 기존 배열을 수정하지 않고 배열을 복사해서 하였는지 궁금하죠?</p>\n<h1>불변성이란?</h1>\n<p>이전 코드에서 slice를 사용해서 squares의 사본을 만드는 작업을 했었습니다.</p>\n<p>일반적으로 데이터를 변경하는 방법에는 두가지의 방법이 있습니다.</p>\n<blockquote>\n<h2>객체 변경을 통해 데이터를 수정하기</h2>\n</blockquote>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">var player = { score: 1, name: &quot;Jeff&quot; };\nplayer.score = 2;\n// 이제 player는 {score: 2, name: &#39;Jeff&#39;}입니다.</code>\n        </deckgo-highlight-code>\n<blockquote>\n<h2>객체 변경없이 데이터를 수정하기</h2>\n</blockquote>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">var player = { score: 1, name: &quot;Jeff&quot; };\n\nvar newPlayer = Object.assign({}, player, { score: 2 });\n// 이제 player는 변하지 않았지만 newPlayer는 {score: 2, name: &#39;Jeff&#39;}입니다.\n\n// 만약 객체 spread 구문을 사용한다면 이렇게 쓸 수 있습니다.\n// var newPlayer = {...player, score: 2};</code>\n        </deckgo-highlight-code>\n<p>최종 결과는 동일하지만 객체 변경없이 데이터를 수정하면 얻을수 있는 이점이 몇몇개 있습니다!(이를 불변성을 유지한다고 합니다.) 그것이 우리가 setState를 사용하는 이유입니다. 한번 알아볼까요?</p>\n<ul>\n<li>\n<h1>복잡한 특징들을 단순하게 만듦</h1>\n<p>직접적인 데이터 변이를 피하는 것은 이전 버전의 게임 이력을 유지하고 나중에 재사용할 수 있게 만듭니다.</p>\n</li>\n<li>\n<h1>변화를 감지함</h1>\n<p>객체가 직접적으로 수정되기 때문에 복제가 가능한 객체에서 변화를 감지하는 것은 어렵습니다.</p>\n<p><strong>불변 객체에서 변화를 감지하는 것은 상당히 쉽습니다. 참조하고 있는 불변 객체가 이전 객체와 다르다면 객체는 변한 것입니다.</strong></p>\n</li>\n<li>\n<h1>React에서 다시 렌더링하는 시기를 결정함</h1>\n<p>변하지 않는 데이터는 변경이 이루어졌는지 쉽게 판단할 수 있으며 이를 바탕으로 컴포넌트가 다시 렌더링할지를 결정할 수 있습니다.</p>\n</li>\n</ul>\n<p>이제 무슨느낌인지 잘 아시겠지요?</p>\n<h1>함수 컴포넌트 작성하는 방법.</h1>\n<p>아까 이 글을 시작하기 전에 요즘에는 클래스형 컴포넌트는 잘 사용하지 않는다고 했었죠? 그래서 요즘에는 <strong>함수형 컴포넌트 + Hooks</strong>를 이용한 구조를 많이 사용한답니다.</p>\n<p>Square컴포넌트를 함수형 컴포넌트로 리팩토링 해볼까요?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Square extends React.Component {\n  render() {\n    return (\n      &lt;button className=&quot;square&quot; onClick={() =&gt; this.props.onClick()}&gt;\n        {this.props.value}\n      &lt;/button&gt;\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>이게 클래스형으로 만든 클래스 컴포넌트이고,</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function Square(props) {\n  return (\n    &lt;button className=&quot;square&quot; onClick={props.onClick}&gt;\n      {props.value}\n    &lt;/button&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>그 다음 이것이 함수형으로 작성한 컴포넌트입니다.</p>\n<p><strong>코드가 훨씬 깔끔하죠?</strong></p>\n<p>잘 보시면 <code>this</code>가 없어졌습니다.</p>\n<blockquote>\n<p>Square를 함수 컴포넌트로 수정했을 때 onClick={() => this.props.onClick()}을 onClick={props.onClick}로 간결하게 작성했습니다. 양쪽 모두 괄호가 사라진 것에 주목해주세요.</p>\n</blockquote>\n<h1>순서 만들기</h1>\n<p>우리가 틱택토 게임을 만들때 X만 표시되었었죠? 하지만 O도 표시되게 하기위해서 로직을 좀 더 수정해야 합니다.</p>\n<p>첫번째 차례를 X로 하겠습니다. 아래의 코드를 집중해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Board extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      squares : Array(9).fill(null),\n      xIsNext : true\n    }\n  }</code>\n        </deckgo-highlight-code>\n<p>조건부 연산을 위한 xIsNext라는 state를 선언해주세요.</p>\n<p>그리고 handleClick을 조금 수정해주도록 하겠습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">    handleClick(i) {\n    const squares = this.state.squares.slice();\n    squares[i] = this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;;\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }</code>\n        </deckgo-highlight-code>\n<p>이러면 xIsNext가 toggle(번갈아서)되므로 X,O가 반복되는 모습을 볼 수 있습니다.</p>\n<p><strong>Board의 render 안에 있는 “status” 텍스트도 바꿔서 어느 플레이어가 다음 차례인지 알려주겠습니다.</strong></p>\n<p>state변수를 다음과 같이 수정해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const status = `Next player : ${this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;}`;</code>\n        </deckgo-highlight-code>\n<h1>승자 결정하기</h1>\n<p>이전 코드에서는 누가 다음에 둬야할지 구현했다면 이제 우리가 할 작업은 승부가 나는 때와 더이상 둘 곳이 없을때를 알려주어야합니다.</p>\n<p>그럴려면 약간의 알고리즘? 이 필요한데 아래의 코드를 보도록 하죠.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i &lt; lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}</code>\n        </deckgo-highlight-code>\n<p>위 함수가 승자판별을 위한 함수입니다.</p>\n<p>lines의 경우의 수를 탐색해서 누가 승자인지 판별하는 것이지요.</p>\n<p>이제 어떤식으로 <code>calculateWinner</code>를 사용하는지 볼까요?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">let status;\nconst winner = calculateWinner(this.state.squares);\n\nif (winner) {\n  status = &quot;Winner&quot; + winner;\n} else {\n  status = &quot;Next Player&quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n}</code>\n        </deckgo-highlight-code>\n<p>이러고 화면을 보면 정상적으로 Winner가 뜨는것을 볼 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116800460-39bce400-ab3c-11eb-93f3-5afbb36c6450.png\" alt=\"image\"></p>\n<p>하지만 해야할 작업이 아직 더 남아있습니다.</p>\n<p>누군가가 승리하거나 Square가 이미 채워졌다면 Board의 handleClick 함수가 클릭을 무시하도록 해야합니다.</p>\n<p>그럴려면 조건문을 하나 더 만들어야겠죠?</p>\n<p><code>handleClick</code>함수를 다음과 같이 수정해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">handleClick(i) {\n    const squares = this.state.squares.slice();\n    if(calculateWinner(squares) || squares[i]){\n      return ;\n    }\n    squares[i] = this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;;\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }</code>\n        </deckgo-highlight-code>\n<p>그러면 누군가가 승리하거나 Square가 이미 채워졌다면 Board의 handleClick 함수가 클릭을 무시되게 할 수 있습니다.</p>\n<h1>🥳 축하해요! 틱택토 게임을 만들었어요!</h1>\n<p>하지만 여기서 더 멋있는 기능을 구현해보도록 해보죠! 바로 <code>시간여행</code>이라는 기능입니다. 경기에서 이전 차례로 “시간여행”을 만들겠습니다.</p>\n<h1>시간 여행 추가하기</h1>\n<p>이 기능은 불변성을 유지하지 않고 구현했다면 어려웠을 겁니다. 하지만 우리는 불변성을 유지해주었기 때문에 기록을 남길 수 있는것이죠.\n(조금 햇갈릴 수 있습니다. 하지만 천천히 따라와보도록 합시다.)</p>\n<p><strong>과거의 squares 배열들을 history라는 다른 배열에 저장할 것입니다.</strong></p>\n<p>즉 <strong>history배열은 게임의 모든 정보가 포함되어 있는것이죠.</strong></p>\n<p><code>Board</code>컴포넌트의 생성자를 다음과 같이 수정해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">  constructor(props){\n    super(props)\n    this.state = {\n      history : [{\n          squares : Array(9).fill(null),\n      }],\n      xIsNext : true\n    }\n  }</code>\n        </deckgo-highlight-code>\n<p>오류가 날겁니다. 이제 하나하나 수정해보도록 하죠.</p>\n<p>Game 컴포넌트에서 Board 컴포넌트로 squares와 onClick props를 전달하겠습니다. 그러면 생성자가 Board에는 필요가 없겠죠?</p>\n<ul>\n<li>\n<p>constructor를 Board에서 제거해주세요.</p>\n</li>\n<li>\n<p>Board의 renderSquare 안의 this.state.squares[i]를 this.props.squares[i]로 바꿔주세요.</p>\n</li>\n<li>\n<p>Board의 renderSquare 안의 this.handleClick(i)을 this.props.onClick(i)으로 바꿔주세요.</p>\n</li>\n</ul>\n<p>그렇게 하게되면 Board컴포넌트는 다음과 같은 코드형식일겁니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Board extends React.Component {\n  handleClick(i) {\n    const squares = this.state.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;;\n    this.setState({\n      squares: squares,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  renderSquare(i) {\n    return (\n      &lt;Square\n        value={this.props.squares[i]}\n        onClick={() =&gt; this.props.onClick(i)}\n      /&gt;\n    );\n  }\n\n  render() {\n    let status;\n    const winner = calculateWinner(this.state.squares);\n\n    if (winner) {\n      status = &quot;Winner&quot; + winner;\n    } else {\n      status = &quot;Next Player&quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n    }\n\n    return (\n      &lt;div&gt;\n        &lt;div className=&quot;status&quot;&gt;{status}&lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>Board컴포넌트에서</p>\n<deckgo-highlight-code html  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;div className=&quot;status&quot;&gt;{status}&lt;/div&gt;</code>\n        </deckgo-highlight-code>\n<p>이 부분을 지워주세요.</p>\n<p>그 다음 handleClick 함수를 Game컴포넌트로 이동시켜주세요!\nGame컴포넌트랑 state가 다르게 구성되어있기 때문에 handleClick함수를 수정해주어야 합니다.</p>\n<p>아래와 같이 수정해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? &#39;X&#39; : &#39;O&#39;;\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n      }]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }</code>\n        </deckgo-highlight-code>\n<p>current는 가장 최근의 squares를 의미합니다.</p>\n<p>그리고 <code>push</code>를 안쓰고 <code>concat</code>을 사용하는 이유는 새로운 배열을 만들어주기 때문에 더욱 좋습니다.</p>\n<p>이제 Board컴포넌트는 renderSquare와 render만을 필요로 합니다.</p>\n<p>전체적인 코드를 확인해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function Square(props) {\n  return (\n    &lt;button className=&quot;square&quot; onClick={props.onClick}&gt;\n      {props.value}\n    &lt;/button&gt;\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      &lt;Square\n        value={this.props.squares[i]}\n        onClick={() =&gt; this.props.onClick(i)}\n      /&gt;\n    );\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;;\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n        },\n      ]),\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[history.length - 1];\n    const winner = calculateWinner(current.squares);\n\n    let status;\n    if (winner) {\n      status = &quot;Winner: &quot; + winner;\n    } else {\n      status = &quot;Next player: &quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n    }\n\n    return (\n      &lt;div className=&quot;game&quot;&gt;\n        &lt;div className=&quot;game-board&quot;&gt;\n          &lt;Board\n            squares={current.squares}\n            onClick={(i) =&gt; this.handleClick(i)}\n          /&gt;\n        &lt;/div&gt;\n        &lt;div className=&quot;game-info&quot;&gt;\n          &lt;div&gt;{status}&lt;/div&gt;\n          &lt;ol&gt;{/* TODO */}&lt;/ol&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(&lt;Game /&gt;, document.getElementById(&quot;root&quot;));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i &lt; lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}</code>\n        </deckgo-highlight-code>\n<h1>🚙 과거의 이동 표시하기</h1>\n<p>이제 틱택토게임은 플레이어의 행동 하나하나를 기록하고있기 때문에 과거의 이동 행적을 표시할 수 있습니다.</p>\n<p>JavaScript에서 배열은 데이터를 다른 데이터와 함께 매핑할 때 사용하는 <strong>map()</strong> 함수를 가지고 있습니다.</p>\n<p>map의 사용벙을 알아보도록 합시다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const arr = [1, 2, 3, 4];\nconst mapArr = arr.map((element) =&gt; element * 2);\nconsole.log(mapArr); //2,4,6,8</code>\n        </deckgo-highlight-code>\n<p><strong>map 함수를 사용하여 이동 기록을 화면에 표시되는 React 버튼 엘리먼트로 맵핑할 수 있으며 과거의 이동으로 “돌아가는” 버튼 목록을 표시할 수 있습니다.</strong></p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const moves = history.map((step, move) =&gt; {\n  const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;\n  return (\n    &lt;li&gt;\n      &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt;\n    &lt;/li&gt;\n  );\n});</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116808497-12820900-ab74-11eb-8ef4-43fb1f3da7ac.png\" alt=\"image\"></p>\n<p>오류가 나지만 정상적으로 버튼이 랜더링 되는 모습을 볼 수 있죠?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;</code>\n        </deckgo-highlight-code>\n<p>위 코드는 map함수에서 두번째 파라미터로 index라는 값을 전달해주는데, 이는 0부터 시작해서 함수의 length - 1까지 주어지는 값입니다. 즉 index가 0이라면 조건부를 통해서 처음 시작인지 아닌지를 판별하는 것이지요.</p>\n<p>자 오류를 한번 볼까요?</p>\n<p>**Warning: Each child in a list should have a unique \"key\" prop.**라고 하네요!</p>\n<blockquote>\n<p><strong>경고: 배열이나 이터레이터의 자식들은 고유의 “key” prop을 가지고 있어야 합니다.</strong></p>\n</blockquote>\n<p>key가 정확이 무엇이고 어떤 역할을 하는 속성일까요?</p>\n<p>리스트를 렌더링할 때 React는 렌더링하는 리스트 아이템들에 대한 정보를 저장합니다. <strong>리스트를 업데이트 할 때 React는 무엇이 변했는 지 결정해야 합니다</strong>. 리스트의 아이템들은 추가, 제거, 재배열, 업데이트 될 수 있습니다.</p>\n<p>위의 코드가</p>\n<deckgo-highlight-code jsx  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;li&gt;Alexa: 7 tasks left&lt;/li&gt;\n&lt;li&gt;Ben: 5 tasks left&lt;/li&gt;</code>\n        </deckgo-highlight-code>\n<p>아래와 같이 바뀐다고 생각해봅시다.</p>\n<deckgo-highlight-code jsx  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;li&gt;Ben: 9 tasks left&lt;/li&gt;\n&lt;li&gt;Claudia: 8 tasks left&lt;/li&gt;\n&lt;li&gt;Alexa: 5 tasks left&lt;/li&gt;</code>\n        </deckgo-highlight-code>\n<p>프로그래머의 눈에는 task 개수가 업데이트되었을 뿐만 아니라 Alexa와 Ben의 순서가 바뀌고 Claudia가 두 사람 사이에 추가되었다고 생각할 것입니다. 하지만 우리가 집중해야하는건 <strong>React의 프로그램입니다.</strong></p>\n<p>리액트는 우리의 시각과 달리 프로그래머가 의도한 바가 무엇인지 알지 못합니다.</p>\n<p>그렇기 때문에 key를 지정해줌으로써 각 리스트는 다른 리스트들과는 다르다는걸 알려주어야합니다.</p>\n<p>아래와 같은 형식으로 말이죠.</p>\n<deckgo-highlight-code jsx  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">&lt;li key={user.id}&gt;\n  {user.name}: {user.taskCount} tasks left\n&lt;/li&gt;</code>\n        </deckgo-highlight-code>\n<p>그러면 우리가 React에게 각 리스트가 다르다는걸 알려줄 필요가 있을까요?</p>\n<p>목록을 다시 렌더링하면 React는 각 리스트 아이템의 키를 가져가며 이전 리스트 아이템에서 일치하는 키를 탐색합니다. 현재 리스트에서 이전에 존재하지 않는 키를 가지고 있다면 React는 새로운 컴포넌트를 생성합니다.</p>\n<p><strong>키는 각 컴포넌트를 구별할 수 있도록 하여 React에게 다시 렌더링할 때 state를 유지할 수 있게 합니다. 만약 컴포넌트의 키가 변한다면 컴포넌트는 제거되고 새로운 state와 함께 다시 생성됩니다.</strong></p>\n<p>React는 자동으로 key를 어떤 컴포넌트를 업데이트 할 지 판단하는 데에 사용합니다. 컴포넌트는 key를 조회할 수 없습니다.</p>\n<p>React 개발자피셜 : <strong>\"동적인 리스트를 만들 때마다 적절한 키를 할당할 것을 강력하게 추천합니다. 적절한 키가 없는 경우 데이터 재구성을 고려해 볼 수 있습니다.\"</strong></p>\n<p>아까 오류부터 해결해볼까요?</p>\n<p>틱택토 게임의 기록에서 과거의 이동 정보는 이동의 순차적인 숫자를 고유한 ID로 가졌습니다. 이동은 순서가 바뀌거나 삭제되거나 중간에 삽입될 수 없기 때문에 이동의 인덱스를 키로 사용해도 안전합니다.</p>\n<p>다음과 같이 코드를 작성하면 오류는 없어질것입니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const moves = history.map((step, move) =&gt; {\n  const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;\n  return (\n    &lt;li key={move}&gt;\n      &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt;\n    &lt;/li&gt;\n  );\n});</code>\n        </deckgo-highlight-code>\n<h1>⌚️ 시간 여행 구현하기</h1>\n<p>이제 버튼을 클릭하면 그 step으로 돌아가는 기능을 구현해보도록 할까요?</p>\n<p>지금은 눌러도 아무런 기능을 하지 못합니다.오히여 오류가 날겁니다. 왜냐하면 구현을 안해놨거든요!</p>\n<p>state를 하나 더 만들어볼까요?</p>\n<p>stepNumber: 0를 하나 선언해주세요!</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">class Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n        squares: Array(9).fill(null),\n      }],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }</code>\n        </deckgo-highlight-code>\n<p>그 다음 <code>jumpTo</code>를 선언해주세요</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }</code>\n        </deckgo-highlight-code>\n<p>로직에 대해서 이야기를 좀 해볼까요?\n이 jumpTo는</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116811509-bbd0fb00-ab84-11eb-81ce-8af7854c0be4.png\" alt=\"image\"></p>\n<p>다음 버튼이 클릭되었을때 실행할 함수입니다.</p>\n<p>클릭이 되면 setState를 진행하는데, stepNumber를 클릭한 step으로 설정하고, xIsNext를 해당 step의 값으로 바꾸어줍니다.</p>\n<p>이제 handleClick을 조금 수정할 차례입니다.</p>\n<p><strong>stepNumber state는 현재 사용자에게 표시되는 이동을 반영합니다.</strong></p>\n<p><code>stepNumber: history.length</code>를 추가해서 <code>stepNumber</code>를 업데이트 해야합니다.</p>\n<p>최종 코드입니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">function Square(props) {\n  return (\n    &lt;button className=&quot;square&quot; onClick={props.onClick}&gt;\n      {props.value}\n    &lt;/button&gt;\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      &lt;Square\n        value={this.props.squares[i]}\n        onClick={() =&gt; this.props.onClick(i)}\n      /&gt;\n    );\n  }\n\n  render() {\n    return (\n      &lt;div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(0)}\n          {this.renderSquare(1)}\n          {this.renderSquare(2)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(3)}\n          {this.renderSquare(4)}\n          {this.renderSquare(5)}\n        &lt;/div&gt;\n        &lt;div className=&quot;board-row&quot;&gt;\n          {this.renderSquare(6)}\n          {this.renderSquare(7)}\n          {this.renderSquare(8)}\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [\n        {\n          squares: Array(9).fill(null),\n        },\n      ],\n      stepNumber: 0,\n      xIsNext: true,\n    };\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    squares[i] = this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;;\n    this.setState({\n      history: history.concat([\n        {\n          squares: squares,\n        },\n      ]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: step % 2 === 0,\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) =&gt; {\n      const desc = move ? &quot;Go to move #&quot; + move : &quot;Go to game start&quot;;\n      return (\n        &lt;li key={move}&gt;\n          &lt;button onClick={() =&gt; this.jumpTo(move)}&gt;{desc}&lt;/button&gt;\n        &lt;/li&gt;\n      );\n    });\n\n    let status;\n    if (winner) {\n      status = &quot;Winner: &quot; + winner;\n    } else {\n      status = &quot;Next player: &quot; + (this.state.xIsNext ? &quot;X&quot; : &quot;O&quot;);\n    }\n\n    return (\n      &lt;div className=&quot;game&quot;&gt;\n        &lt;div className=&quot;game-board&quot;&gt;\n          &lt;Board\n            squares={current.squares}\n            onClick={(i) =&gt; this.handleClick(i)}\n          /&gt;\n        &lt;/div&gt;\n        &lt;div className=&quot;game-info&quot;&gt;\n          &lt;div&gt;{status}&lt;/div&gt;\n          &lt;ol&gt;{moves}&lt;/ol&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    );\n  }\n}\n\n// ========================================\n\nReactDOM.render(&lt;Game /&gt;, document.getElementById(&quot;root&quot;));\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n  for (let i = 0; i &lt; lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] &amp;&amp; squares[a] === squares[b] &amp;&amp; squares[a] === squares[c]) {\n      return squares[a];\n    }\n  }\n  return null;\n}</code>\n        </deckgo-highlight-code>\n<h1>🎊 축하합니다! 틱택토 게임을 만드셨군요!</h1>\n<p>이제 리액트의 기술을 조금 터득했을 거라고 믿습니다! 지금까지 정말 수고하셨습니다.</p>","frontmatter":{"title":"🎮 리액트(React.js)로 만드는 틱택토","profile":"https://avatars.githubusercontent.com/u/48292190?v=4","name":"홍준혁","createdAt":"2021년 5월 2일"}}},"pageContext":{"slug":"/blog/react_tictactoe/"}},"staticQueryHashes":[]}