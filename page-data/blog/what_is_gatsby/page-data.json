{"componentChunkName":"component---src-template-post-page-jsx","path":"/blog/what_is_gatsby/","result":{"data":{"markdownRemark":{"html":"<h1>🦹🏼‍♂️ Gatsby</h1>\n<p>Gatsby 사이트를 쉽게 생성하기 위해서 다음과 같은 명령어를 수행해주면 된다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">npm install -g gatsby-cli</code>\n        </deckgo-highlight-code>\n<p>Gatsby CLI를 통해 쉽고 다양한 기능들을 사용 해볼수있다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//개츠비 명령어 보기\ngatsby --help</code>\n        </deckgo-highlight-code>\n<h1>🏰 간단히 Hello World 스타터를 이용하여 Gatsby를 빌드해봅시다.</h1>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby new hello-world https://github.com/gatsbyjs/gatsby-starter-hello-world</code>\n        </deckgo-highlight-code>\n<p>개츠비 Hello World 스타터를 사용해보기 위해 다음 명령어를 해당 폴더에 쳐줍시다.</p>\n<ul>\n<li>new명령어는 새로운 개츠비 프로젝트를 생성하겠다는 의미이다.</li>\n<li>new 다음에 오는 hello-world는 생성된 폴더의 이름이고 바꿀수 있다.</li>\n<li>마지막으로 지정된 GitHub URL은 사용하려는 시작 코드가있는 코드 저장소를 가리킨다.</li>\n</ul>\n<p>생성한 폴더로 가서</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">cd hello-world</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby develop</code>\n        </deckgo-highlight-code>\n<p>개발모드로 시작해보자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115961222-6d05de80-a550-11eb-8419-637d2b62a1ec.png\" alt=\"image\"></p>\n<p>이제 당신의 <strong>로컬환경</strong>에서 서버가 돌아갈것이다.</p>\n<blockquote>\n<p>만약 빌드에 성공했다면, <a href=\"http://localhost:8000/\">링크</a></p>\n</blockquote>\n<p>해당 프로세스를 Kill할려면 <code>control + c</code>로 터미널을 종료한다.</p>\n<p>정리</p>\n<ul>\n<li>Gatsby CLI 도구를 사용하여 새 Gatsby 사이트 생성</li>\n<li>Gatsby 개발 서버를 실행하고 사이트를 로컬로 방문했습니다.</li>\n</ul>\n<blockquote>\n<p>HTML : 모든 웹 브라우저가 이해할 수있는 마크 업 언어입니다. HyperText Markup Language의 약자입니다. HTML은 웹 콘텐츠에 보편적 인 정보 구조를 제공하여 제목, 단락 등을 정의합니다.</p>\n</blockquote>\n<blockquote>\n<p>CSS : 웹 콘텐츠 (글꼴, 색상, 레이아웃 등)의 스타일을 지정하는 데 사용되는 표현 언어입니다. Cascading Style Sheets의 약자입니다.</p>\n</blockquote>\n<blockquote>\n<p>JavaScript : 웹을 역동적이고 인터랙티브하게 만드는 데 도움이되는 프로그래밍 언어입니다.</p>\n</blockquote>\n<blockquote>\n<p>React : 사용자 인터페이스 구축을위한 코드 라이브러리 (JavaScript로 구축). Gatsby가 페이지를 구축하고 콘텐츠를 구조화하는 데 사용하는 프레임 워크입니다.</p>\n</blockquote>\n<blockquote>\n<p>GraphQL : 웹 사이트로 데이터를 가져올 수있는 쿼리 언어입니다. Gatsby가 사이트 데이터를 관리하는 데 사용하는 인터페이스입니다.</p>\n</blockquote>\n<h1>🕵️‍♂️ 코드 자세히 살펴보기</h1>\n<p>아까 <code>🏰 간단히 Hello World 스타터를 이용하여 Gatsby를 빌드해봅시다.</code>에서 빌드했던 hello-world스타터의 코드를 좀 더 자세히 살펴보도록 하자.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby new [SITE_DIRECTORY_NAME]        [URL_OF_STARTER_GITHUB_REPO]</code>\n        </deckgo-highlight-code>\n<p>다음과 같은 형식으로 개츠비 프로젝트를 빌드할수 있다는 사실은 이제 다 아는 사실이다.</p>\n<blockquote>\n<p>아까 스타터로 프로젝트를 빌드했다면 다음과 같은 구조를 가지고 있을것이다.\n<img src=\"https://user-images.githubusercontent.com/48292190/115961609-16999f80-a552-11eb-881b-94581debbc2d.png\" alt=\"image\"></p>\n</blockquote>\n<p>우리는 Gatsby코드에 조금 더 익숙해져야할 필요성이 있다.😋</p>\n<p><code>/src</code> 에 <code>src/pages/index.js</code>를 열어보도록 하자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\n\nexport default function Home() {\n  return &lt;div&gt;Hello world!&lt;/div&gt;;\n}</code>\n        </deckgo-highlight-code>\n<p>우리가 리액트를 조금이라도 해봤다면 이 코드가 뭐하는 아이인지 다 알것이다.\n<strong>그렇다면 우리는 리액트 프로젝트를 진행했던것처럼 Hello World를 Hello Gatsby로 변경해서 저장후 웹사이트에서 변화를 관찰해보자.</strong></p>\n<del>\n저장후 바로 리로딩이 안돼요!\n제 생각에 이 문제는 gatsby의 오류라고 생각합니다. 버전을 다운드레이드 하거나, 불편하더라도 여러번(2~3번) 저장 후 보면 리로딩이 되어 있습니다. \n</del>\n<h1>핫로딩 문제 해결</h1>\n<p>webpack dev server가 핫 모듈 교체를 위해 0.0.0.0을 localhost로 인식하지 못하는 문제</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby develop --host localhost --port 8000</code>\n        </deckgo-highlight-code>\n<p>위와 같이 실행하면 문제 해결</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\n\nexport default function Home() {\n  return (\n    &lt;div style={{ color: `purple` }}&gt;\n      &lt;h1&gt;Hello Gatsby!&lt;/h1&gt;\n      &lt;p&gt;What a world.&lt;/p&gt;\n      &lt;img src=&quot;https://source.unsplash.com/random/400x200&quot; alt=&quot;&quot; /&gt;\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>공식 문서처럼 다음과 같이 작성하고보면,\n<img src=\"https://user-images.githubusercontent.com/48292190/115962551-e6a0cb00-a556-11eb-9f26-f1cf2efb61d7.png\" alt=\"image\">\n이렇게 예상했던것처럼 잘 나오는 것을 볼 수 있다.</p>\n<p>아까도 말했지만 어느정도 리액트를 해본 사람이라면 눈치를 챘을것이다.\n<strong>Gatsby는 리액트를 기반으로 돌아간다.</strong></p>\n<p><code>src/pages/*.js</code>안에 내용들은 전부 페이지가 된다.\n이제 실제로 되는 것인지 한번 확인해보도록 하자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115963458-4d73b380-a55a-11eb-8a85-67495f65726b.png\" alt=\"image\">\n이렇게 about이라는 파일을 만들고 다음과 같이 작성해주자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\n\nexport default function About() {\n  return &lt;div&gt;이것은 About에 대한 about입니다.&lt;/div&gt;;\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 하고\n<a href=\"http://localhost:8000/about\">http://localhost:8000/about</a> 에 접속해보도록 하자.</p>\n<h2>😂개츠비 공식홈페이지에서 설명하는 섹션0 ~ 3정도는 리액트에 대한 설명이므로 설명이 필요한 사람은 보도록 하자.</h2>\n<h1>🚏 Link로 라우팅하기</h1>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import { Link } from &quot;gatsby&quot;;</code>\n        </deckgo-highlight-code>\n<p>다음과 같은 코드로 Link라는 아이를 가져오도록 하자.</p>\n<p>이제 index.js에 about으로 가는 코드를 작성해보도록 하자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { Link } from &quot;gatsby&quot;;\n\nexport default function Home() {\n  return (\n    &lt;&gt;\n      &lt;Link to=&quot;/about&quot;&gt;About으로 이동합니다!&lt;/Link&gt;\n    &lt;/&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p><code>Link</code>를 사용하게 되면 Gatsby프로젝트 내에서 라우팅을 할때 페이지를 리로딩하지 않고 이동하게 된다.</p>\n<blockquote>\n<h1>a태그는 그럼 쓸모가 없나요?</h1>\n<p>아닙니다! 외부링크로 이동할때 a태그를 사용합니다.</p>\n</blockquote>\n<h1>🎨 Gatsby 스타일링</h1>\n<p>tutorial-part-two라는 폴더에 gatsby프로젝트를 하나 더 만들어보자.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby new tutorial-part-two https://github.com/gatsbyjs/gatsby-starter-hello-world</code>\n        </deckgo-highlight-code>\n<p>src안에 <code>styles</code>라는 폴더를 만들고 그 안에 <code>global.css</code>라는 파일을 만들어보자.</p>\n<p>글로벌 스타일링을 해볼건데, 이는 프로젝트에 전체적으로 사용할 스타일을 지정하는 것이다. 예를들어 타이포그래피라든지 색깔이나 그런것들 말이다.</p>\n<deckgo-highlight-code css  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">html {\n  background-color: lavenderblush;\n}</code>\n        </deckgo-highlight-code>\n<p>다음 속성을 <code>global.css</code>에 추가해보자.</p>\n<p>이제 <code>gatsby-browser.js</code>라는 파일을 만들어보자.</p>\n<p>이 파일은 루트폴더에 존재해야 한다.</p>\n<p><strong>이제 최근에 만든 global.css를 gatsby-browser.js에 import해주자.</strong></p>\n<blockquote>\n<p>server을 껐다가 다시 켜보자.</p>\n</blockquote>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115964147-f5d74700-a55d-11eb-9259-9ce6c44597f3.png\" alt=\"image\"></p>\n<p>그러면 이렇게 전역적으로 background-color가 lavenderblush가 된것을 확인할 수 있다.</p>\n<blockquote>\n<p>이렇게 gatsby-browser.js를 사용해서 전역 스타일을 적용하는 방법도 있지만 공유 레이아웃에 스타일을 적용하는 방법도 있다.</p>\n</blockquote>\n<h1>🤷‍♀️ CSS 모듈</h1>\n<p>CSS를 모듈화해서 구성 요소 지향 방식으로 스타일을 처리하는 다양한 방법에 대해 알아보자.</p>\n<blockquote>\n<p>CSS 모듈 의 모든 클래스 이름 및 애니메이션 이름은 기본적으로 로컬 범위가되어있는 CSS 파일입니다.</p>\n</blockquote>\n<p>CSS모듈은 CSS를 정상적으로 작성할 수 있지만 훨씬 안전하기 때문에 인기가 많다.</p>\n<h3>🎨 직접 해봅시다.</h3>\n<p>1.src/components를 만든 다음에, 새 디렉터리 <code>container.js</code>와 <code>container.module.css</code>를 만들자.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/115990923-e6f5a080-a600-11eb-9cb8-701f1c76e542.png\" alt=\"image\"></p>\n<p>이제 container.js에서 다음과 같이 코딩해주자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport * as containerStyles from &quot;./container.module.css&quot;;\n\nexport default function Container({ children }) {\n  return &lt;div className={containerStyles.container}&gt;{children}&lt;/div&gt;;\n}</code>\n        </deckgo-highlight-code>\n<p>다음은 css이다.</p>\n<deckgo-highlight-code css  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">.container {\n  margin: 3rem auto;\n  max-width: 600px;\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 작업을 해준 다음에 pages에 만든 컴포넌트를 연결해주자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Container from &quot;../components/container&quot;;\nexport default function About() {\n  return (\n    &lt;Container&gt;\n      &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n      &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n    &lt;/Container&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 해주고 <a href=\"http://localhost:8000/about\">http://localhost:8000/about</a> 에 접속해보면,\n<img src=\"https://user-images.githubusercontent.com/48292190/115991018-4489ed00-a601-11eb-8cc9-5878c26627b2.png\" alt=\"image\"></p>\n<p>정상적으로 스타일이 적용된 모습을 볼 수 있다.</p>\n<h2>🙃 CSS 모듈을 사용하여 구성 요소 스타일 지정</h2>\n<p><code>pages</code>에 <code>about.module.css</code>를 만들어보자.</p>\n<deckgo-highlight-code css  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">.user {\n  display: flex;\n  align-items: center;\n  margin: 0 auto 12px auto;\n}\n.user:last-child {\n  margin-bottom: 0;\n}\n.avatar {\n  flex: 0 0 96px;\n  width: 96px;\n  height: 96px;\n  margin: 0;\n}\n.description {\n  flex: 1;\n  margin-left: 18px;\n  padding: 12px;\n}\n.username {\n  margin: 0 0 12px 0;\n  padding: 0;\n}\n.excerpt {\n  margin: 0;\n}</code>\n        </deckgo-highlight-code>\n<p>그 다음 about페이지에 import를 해주도록 하자.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Container from &quot;../components/containers&quot;;\nimport * as styles from &quot;./about.module.css&quot;;\n\nexport default function About() {\n  console.log(styles);\n  return (\n    &lt;Container&gt;\n      &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n      &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n    &lt;/Container&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<h4>그러면 콘솔창에 다음과 같이 찍힐것이다.</h4>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116013555-c282de00-a66b-11eb-9a61-b8f7ebc55f41.png\" alt=\"image\"></p>\n<blockquote>\n<p>말투좀 바꿀게요...🤗</p>\n</blockquote>\n<h2>Module이 적용이 안되요!</h2>\n<p>그런 경우에는 파일의 확장자를 확인해보세요!\n<code>.module.css</code>여야만 합니다. <code>.css</code>는 CSS 모듈이 적용되지 않습니다.</p>\n<p><code>import * as styles from './about.css';</code></p>\n<h2>그럼 한번 제대로 사용해볼까요?</h2>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Container from &quot;../components/containers&quot;;\nimport * as styles from &quot;./about.module.css&quot;;\n\nconst User = (props) =&gt; (\n  &lt;div className={styles.user}&gt;\n    &lt;img src={props.avatar} className={styles.avatar} alt=&quot;&quot; /&gt;\n    &lt;div className={styles.description}&gt;\n      &lt;h2 className={styles.username}&gt;{props.username}&lt;/h2&gt;\n      &lt;p className={styles.excerpt}&gt;{props.excerpt}&lt;/p&gt;\n    &lt;/div&gt;\n  &lt;/div&gt;\n);\n\nexport default function About() {\n  console.log(styles);\n  return (\n    &lt;Container&gt;\n      &lt;h1&gt;About CSS Modules&lt;/h1&gt;\n      &lt;p&gt;CSS Modules are cool&lt;/p&gt;\n      &lt;User\n        username=&quot;Maria Randall&quot;\n        avatar=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/docs/docs/tutorial/part-two/pexels-daniel-xavier-1102341.jpg&quot;\n        excerpt=&quot;I&#39;m Maria Randall. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n      /&gt;\n      &lt;User\n        username=&quot;Daniela Dewitt&quot;\n        avatar=&quot;https://raw.githubusercontent.com/gatsbyjs/gatsby/master/docs/docs/tutorial/part-two/pexels-guilherme-almeida-1858175.jpg&quot;\n        excerpt=&quot;I&#39;m Daniela Dewitt. Lorem ipsum dolor sit amet, consectetur adipisicing elit.&quot;\n      /&gt;\n    &lt;/Container&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>다음과 같이 about.js에 입력해주세요.</p>\n<p>그러면 /about에는 다음과 같은 화면이 보일겁니다.\n<img src=\"https://user-images.githubusercontent.com/48292190/116028226-a5610600-a691-11eb-96c6-b23d333dbeac.png\" alt=\"image\"></p>\n<p>어느정도 감을 잡았지요?</p>\n<h2>CSS in JS란?</h2>\n<blockquote>\n<p>CSS-in-JS는 컴포넌트 지향 스타일링 접근 방식이다.</p>\n</blockquote>\n<p>가장 일반적으로 JavaScript를 사용하여 CSS를 인라인으로 구성 하는 패턴 이다.\n<code>Emotion</code>이나 <code>Styled-components</code>등이 있습니다.</p>\n<h2>중첩된 레이아웃 구성 요소 만들기</h2>\n<blockquote>\n<p>Gatsby 플러그인과 \"레이아웃\"구성 요소 생성에 대해 알아봅시다.</p>\n</blockquote>\n<blockquote>\n<h2>Gatsby 플러그인이란?</h2>\n<p>Gatsby 사이트에 기능을 추가하는 데 도움이되는 JavaScript 패키지입니다.</p>\n</blockquote>\n<p>새로운 예제를 위해서 새로운 프로젝트를 빌드해봅시다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby new tutorial-part-three https://github.com/gatsbyjs/gatsby-starter-hello-world\n\ncd tutorial-part-three</code>\n        </deckgo-highlight-code>\n<p>위 작업을 완료한 다음에 우리가 설치할 플러그인은 <code>Typography.js</code>이다.\n<code>Typography.js</code>는 사이트의 타이포그래피에 대한 글로벌 기본 스타일을 생성하는 JavaScript 라이브러리입니다.</p>\n<p>😊 위 플러그인을 다운받아 봅시다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">yarn add gatsby-plugin-typography react-typography typography typography-theme-fairy-gates</code>\n        </deckgo-highlight-code>\n<p>다운받을게 생각보다 많네요;; 🤨</p>\n<p>작업이 완료되었으면 gatsby-config.js에 다음과 같이 작성해봅시다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">module.exports = {\n  plugins: [\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n};</code>\n        </deckgo-highlight-code>\n<p><strong>gatsby-config.js라는 파일은 개츠비가 자동으로 인식할 수 있는 또 다른 특수 파일입니다.</strong></p>\n<p>자세한 설명은 코딩 후 설명해드리겠습니다.</p>\n<p>src/utils에 typography.js라는 파일을 만들어봅시다.</p>\n<p>다음과 같이 작성해주세요!</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import Typography from &quot;typography&quot;;\nimport fairyGateTheme from &quot;typography-theme-fairy-gates&quot;;\n\nconst typography = new Typography(fairyGateTheme);\nexport const { scale, rhythm, options } = typography;\nexport default typography;</code>\n        </deckgo-highlight-code>\n<p>그 다음 개발서버를 열고 한번 Elements를 봅시다\n<img src=\"https://user-images.githubusercontent.com/48292190/116029475-6a140680-a694-11eb-8ddd-a14ad34741e0.png\" alt=\"image\"></p>\n<p>다음과 같이 뜨는것을 볼 수 있죠?</p>\n<p>이게 잘 적용되었는지 확인해봅시다.\n<img src=\"https://user-images.githubusercontent.com/48292190/116029605-a6476700-a694-11eb-8c6c-b44b0b4824d3.png\" alt=\"image\"></p>\n<p>잘 적용이 되었네요!</p>\n<p>이제 page를 몇개 더 만들 예정입니다.\n<code>about.js</code>,<code>contact.js</code>를 만들어주세요. <strong>그런 다음 코드를 작성해주세요</strong></p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//about.js\nimport React from &quot;react&quot;;\n\nexport default function About() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;About me&lt;/h1&gt;\n      &lt;p&gt;\n        I’m good enough, I’m smart enough, and gosh darn it, people like me!\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">//contact.js\nimport React from &quot;react&quot;;\n\nexport default function Contact() {\n  return (\n    &lt;div&gt;\n      &lt;h1&gt;I&#39;d love to talk! Email me at the address below&lt;/h1&gt;\n      &lt;p&gt;\n        &lt;a href=&quot;mailto:me@example.com&quot;&gt;me@example.com&lt;/a&gt;\n      &lt;/p&gt;\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이제 만들었던 페이지를 한번 볼까요?\n<img src=\"https://user-images.githubusercontent.com/48292190/116030340-4d78ce00-a696-11eb-921d-93e767437abc.png\" alt=\"image\">\n음... 잘 나왔지만 Layout이 index.js랑 통일되었으면 좋겠습니다.\n그래서 컴포넌트를 하나 만들어서 레이아웃을 통일하는 방법을 알아봅시다.</p>\n<p><code>src/components</code>라는 폴더에 <code>layout.js</code>를 만들어줍시다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nexport default function Layout({ children }) {\n  return (\n    &lt;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>그 다음에 만든 레이아웃을 적용해봅시다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function About() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;About me&lt;/h1&gt;\n      &lt;p&gt;\n        I’m good enough, I’m smart enough, and gosh darn it, people like me!\n      &lt;/p&gt;\n    &lt;/Layout&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function Contact() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;I&#39;d love to talk! Email me at the address below&lt;/h1&gt;\n      &lt;p&gt;\n        &lt;a href=&quot;mailto:me@example.com&quot;&gt;me@example.com&lt;/a&gt;\n      &lt;/p&gt;\n    &lt;/Layout&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이제 페이지를 볼까요?</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116030501-a5afd000-a696-11eb-8d12-1a7f37d13b9f.png\" alt=\"image\"></p>\n<p>아까 <code>index.js</code>랑 디자인이 통일된 느낌이 훨씬 좋아졌습니다.</p>\n<h2>🖐 레이아웃에 제목 추가하는 방법?</h2>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nexport default function Layout({ children }) {\n  return (\n    &lt;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}&gt;\n      &lt;h1&gt;MySweetSite&lt;/h1&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>그냥 레이아웃 컴포넌트에 <code>&#x3C;h1></code>안에 적용만 해도 모든 페이지에 다 적용되는 것을 볼 수 있습니다.</p>\n<h2>✋ 페이지 간 NavLink추가</h2>\n<p><code>gatsby</code>에서 지원하는 기능중 하나인 <code>Link</code>라는 기능을 사용해보겠습니다.</p>\n<p>Layout컴포넌트에 다음과 같이 작성해주세요</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { Link } from &quot;gatsby&quot;;\n\nconst ListLink = (props) =&gt; (\n  &lt;li style={{ display: `inline-block`, marginRight: `1rem` }}&gt;\n    &lt;Link to={props.to}&gt;{props.children}&lt;/Link&gt;\n  &lt;/li&gt;\n);\n\nexport default function Layout({ children }) {\n  return (\n    &lt;div style={{ margin: `3rem auto`, maxWidth: 650, padding: `0 1rem` }}&gt;\n      &lt;header style={{ marginBottom: `1.5rem` }}&gt;\n        &lt;Link to=&quot;/&quot; style={{ textShadow: `none`, backgroundImage: `none` }}&gt;\n          &lt;h3 style={{ display: `inline` }}&gt;MySweetSite&lt;/h3&gt;\n        &lt;/Link&gt;\n        &lt;ul style={{ listStyle: `none`, float: `right` }}&gt;\n          &lt;ListLink to=&quot;/&quot;&gt;Home&lt;/ListLink&gt;\n          &lt;ListLink to=&quot;/about/&quot;&gt;About&lt;/ListLink&gt;\n          &lt;ListLink to=&quot;/contact/&quot;&gt;Contact&lt;/ListLink&gt;\n        &lt;/ul&gt;\n      &lt;/header&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이제 웹페이지의 형태를 점점 갖춰가고 있습니다!</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116031270-4a7edd00-a698-11eb-809f-a8657ec01d7b.png\" alt=\"image\"></p>\n<h1>Gatsby에서의 데이터</h1>\n<p>여기까지 오셨다면 Gatsby의 절반은 왔습니다. 조금만 더 힘내주세요!\n사실, 지금까지 여러분이 배운 내용은 <code>React.js</code>를 사용하는 방법을 배운것입니다.</p>\n<p><strong>이제부터는 본격적으로 Gatsby를 사용해봅시다.</strong></p>\n<blockquote>\n<p>데이터 레이어는 Markdown, WordPress, 헤드리스 CMS 및 기타 데이터 소스에서 사이트를 구축 할 수있는 Gatsby의 강력한 기능이다.</p>\n</blockquote>\n<p>Gatsby의 데이터레이어는 graphQL로 구동됩니다.</p>\n<p>무슨말인지 모르시겠다구요? <strong>자세히 살펴봅시다.</strong></p>\n<p>웹 사이트는 HTML, CSS, JS 및 데이터의 네 부분으로 구성되죠! 이 중, 데이터를 한번 자세히 살펴보도록 하겠습니다.</p>\n<p>우리가 지금까지 HTML,CSS,JS를 알아봤었는데 데이터를 시작해보는겁니다!</p>\n<p>Gatsby에서 데이터란</p>\n<h3>\"React 구성 요소 외부에있는 모든 것\"입니다.</h3>\n<p>무슨 느낌인지 아시겠나요?</p>\n<p>우리는 지금까지 파일에서 직접 이미지,텍스트를 추가하고 웹페이지를 만들었습니다. 물론, 좋은 방법이죠! 하지만 종종 외부의 데이터를 필요로 할 때가 있습니다. 예를 들어서 <code>코로나19</code>의 데이터를 가져오고 싶다면요?\n그럴때 외부 데이터를 필요로 하는거랍니다.</p>\n<h2>Gatsby의 데이터 계층이 GraphQL을 사용하여 데이터를 구성 요소로 가져 오는 방법</h2>\n<p>React 컴포넌트에서 데이터를 가져올때, 요즘 인기있는 기술인 <code>graphQL</code>을 사용하는 것입니다.</p>\n<blockquote>\n<p>GraphQL은 제품 엔지니어가 필요한 데이터를 구성 요소로 가져올 수 있도록 Facebook에서 개발되었습니다 .</p>\n</blockquote>\n<p>Gatsby는 GraphQL을 사용하여 구성 요소가 필요한 데이터를 선언 할 수 있도록합니다.</p>\n<p>자, 이제 새로운 내용을 배우니까 새 예제 사이트를 만들어볼까요?</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">gatsby new tutorial-part-four https://github.com/gatsbyjs/gatsby-starter-hello-world\ncd tutorial-part-four</code>\n        </deckgo-highlight-code>\n<p>위의 작업을 완료한 후, <code>typography.js</code>와 <code>Emotion</code>을 사용해보겠습니다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">npm install gatsby-plugin-typography typography react-typography typography-theme-kirkham gatsby-plugin-emotion @emotion/react</code>\n        </deckgo-highlight-code>\n<p>설치를 완료했다면, 저번에 <code>tutorial-part-three</code>에서 만들었던 레이아웃을 만들어주세요!</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { css } from &quot;@emotion/react&quot;;\nimport { Link } from &quot;gatsby&quot;;\n\nimport { rhythm } from &quot;../utils/typography&quot;;\n\nexport default function Layout({ children }) {\n  return (\n    &lt;div\n      css={css`\n        margin: 0 auto;\n        max-width: 700px;\n        padding: ${rhythm(2)};\n        padding-top: ${rhythm(1.5)};\n      `}\n    &gt;\n      &lt;Link to={`/`}&gt;\n        &lt;h3\n          css={css`\n            margin-bottom: ${rhythm(2)};\n            display: inline-block;\n            font-style: normal;\n          `}\n        &gt;\n          Pandas Eating Lots\n        &lt;/h3&gt;\n      &lt;/Link&gt;\n      &lt;Link\n        to={`/about/`}\n        css={css`\n          float: right;\n        `}\n      &gt;\n        About\n      &lt;/Link&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function Home() {\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;Amazing Pandas Eating Things&lt;/h1&gt;\n      &lt;div&gt;\n        &lt;img\n          src=&quot;https://2.bp.blogspot.com/-BMP2l6Hwvp4/TiAxeGx4CTI/AAAAAAAAD_M/XlC_mY3SoEw/s1600/panda-group-eating-bamboo.jpg&quot;\n          alt=&quot;Group of pandas eating bamboo&quot;\n        /&gt;\n      &lt;/div&gt;\n    &lt;/Layout&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import Typography from &quot;typography&quot;;\nimport kirkhamTheme from &quot;typography-theme-kirkham&quot;;\n\nconst typography = new Typography(kirkhamTheme);\nexport default typography;\nexport const rhythm = typography.rhythm;</code>\n        </deckgo-highlight-code>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">module.exports = {\n  plugins: [\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n};</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116035523-190a0f80-a6a0-11eb-8839-3f6def6fc0d5.png\" alt=\"image\"></p>\n<p>정상적으로 레이아웃이 뜬다면 성공입니다. (정확한 코드는 <code>tutorial-part-four</code>에서 참조해주세요!)</p>\n<p>이제 <code>GraphQL</code>을 사용해볼 차례입니다.</p>\n<h1>👾 첫 번째 GraphQL 쿼리</h1>\n<p>사이트를 구축 할 때 사이트 제목과 같은 공통 데이터를 재사용하고 싶을 가 있을거예요. 그런 경우에는 한 위치에 제목을 저장하고 다른 파일에서 해당 위치를 참조할 수 있다면, 나중에 제목을 바꿀 일이 있으면 한 위치의 값만 바꾸면 모든 참조하던 값이 변경되게 되죠.</p>\n<p><code>gatsby-config.js</code>에서 사이트 제목의 값을 추가해보도록 합시다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">module.exports = {\n  siteMetadata: {\n    title: `Title from siteMetadata`,\n  },\n  plugins: [\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n};</code>\n        </deckgo-highlight-code>\n<p>그런 다음 개발서버를 껏다가 다시 켜보세요!</p>\n<h2>🕵️‍♂️ 데이터를 가져와봅시다.</h2>\n<p>이제 siteMetadata라는 속성에 title이라는 값이 있으니까 참조를 할 수 있습니다!\n페이지쿼리를 <code>about페이지</code>에서 사용해봅시다.</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { graphql } from &quot;gatsby&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function About({ data }) {\n  console.log(data.site.siteMetadata.title);\n  return (\n    &lt;Layout&gt;\n      &lt;h1&gt;About {data.site.siteMetadata.title}&lt;/h1&gt;\n      &lt;p&gt;\n        We&#39;re the only site running on your computer dedicated to showing the\n        best photos and videos of pandas eating lots of food.\n      &lt;/p&gt;\n    &lt;/Layout&gt;\n  );\n}\n\nexport const query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n      }\n    }\n  }\n`;</code>\n        </deckgo-highlight-code>\n<p>다음과 같이 작성을 해서 <code>/about</code>의 결과물을 확인해보세요!\n<img src=\"https://user-images.githubusercontent.com/48292190/116040160-a05a8180-a6a6-11eb-898e-d7e0c9dd41af.png\" alt=\"image\"></p>\n<p>잘 가져와진 모습을 볼 수 있습니다.\n여기서 <strong>GrapghQL을 처음 접하는 사람들은 생소해고 이해가 잘 가지 않을것입니다.</strong></p>\n<p>추후에 심도있게 다룰테니 이런식으로 흘러가는구나~ 정도만 알아두시길 바랍니다.</p>\n<h2>😋 StaticQuery 사용</h2>\n<p>static쿼리를 사용하게 되면 페이지가 아닌 구성요소가 쿼리를 통해 데이터를 검색할 수 있습니다.</p>\n<blockquote>\n<h1>구성요소란?</h1>\n<p>구성요소는 하나의 컴포넌트라고 생각하시면 됩니다.</p>\n</blockquote>\n<p>StaticQuery는 hooks도 지원합니다.\n그럼 어떤식으로 사용되는지 보도록하죠!</p>\n<deckgo-highlight-code javascript  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { css } from &quot;@emotion/react&quot;;\nimport { useStaticQuery, Link, graphql } from &quot;gatsby&quot;;\nimport { rhythm } from &quot;../utils/typography&quot;;\n\nexport default function Layout({ children }) {\n  const data = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `\n  );\n  return (\n    &lt;div\n      css={css`\n        margin: 0 auto;\n        max-width: 700px;\n        padding: ${rhythm(2)};\n        padding-top: ${rhythm(1.5)};\n      `}\n    &gt;\n      &lt;Link to={`/`}&gt;\n        &lt;h3\n          css={css`\n            margin-bottom: ${rhythm(2)};\n            display: inline-block;\n            font-style: normal;\n          `}\n        &gt;\n          {data.site.siteMetadata.title}\n        &lt;/h3&gt;\n      &lt;/Link&gt;\n      &lt;Link\n        to={`/about/`}\n        css={css`\n          float: right;\n        `}\n      &gt;\n        About\n      &lt;/Link&gt;\n      {children}\n    &lt;/div&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게 구성요소에서 데이터를 가져오고 사용할 수 있습니다.</p>\n<blockquote>\n<p>대~충 사용법을 알아봤으니 다음챕터에서 소스 플러그인과 함께 GraphQL을 사용하여 데이터를 Gatsby 사이트로 가져 오는 방법에 대해 알아봅시다.</p>\n</blockquote>\n<h2>GraphiQL 소개</h2>\n<blockquote>\n<p>GraphiQL은 GraphQL 통합 개발 환경 (IDE)입니다. Gatsby 웹 사이트를 구축하는 동안 자주 사용하게 될 강력한 도구입니다.</p>\n</blockquote>\n<p>사이트의 개발 서버가 실행 중일때 다음 주소로 접속하면 됩니다.\n<code>http://localhost:8000/___graphql</code></p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116164449-a4cd7b80-a734-11eb-8cb6-a37d21ef5d23.png\" alt=\"image\"></p>\n<p>다음과 같이 실행하고 ▶️ 를 누르면 쿼리문이 실행됩니다.</p>\n<p>그러면 우리가 siteMetadata에 title의 값을 가져와봅시다.</p>\n<p><strong>쿼리문</strong></p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">query MyQuery {\n  site{\n\t\tsiteMetadata{\n\t\t\ttitle\n    }\n  }\n}\n</code>\n        </deckgo-highlight-code>\n<p><strong>결과</strong></p>\n<deckgo-highlight-code json  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">{\n  &quot;data&quot;: {\n    &quot;site&quot;: {\n      &quot;siteMetadata&quot;: {\n        &quot;title&quot;: &quot;Pandas Eating Lots&quot;\n      }\n    }\n  },\n  &quot;extensions&quot;: {}\n}</code>\n        </deckgo-highlight-code>\n<p>잘 나오나요?</p>\n<h2>GraphiQL Explorer 사용</h2>\n<p><code>GraphiQL Explorer</code>를 사용하면 쿼리를 입력하는 귀찮은 작업을 쉽게 수행할 수 있습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116164826-713f2100-a735-11eb-81dd-b957f65757fc.png\" alt=\"image\"></p>\n<p>Explorer부분에서 finder에서 문서를 찾는거처럼 클릭만 하면 자동으로 쿼리문이 동작하는 것을 볼 수 있죠! 굉장히 편안할겁니다.</p>\n<h2>소스 플러그인</h2>\n<p>Gatsby 사이트의 데이터는 API, 데이터베이스, CMS, 로컬 파일 등 어디에서나 가져올 수 있습니다!</p>\n<p>파일 시스템의 파일을 가져오는 플러그인을 한번 설치해볼까요?\n<code>gatsby-source-filesystem</code>을 설치해야 합니다!</p>\n<p>프로젝트 루트에 다음과 같은 명령어를 수행해주세요</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">npm install gatsby-source-filesystem</code>\n        </deckgo-highlight-code>\n<p>늘 그랬듯, 플러그인을 설치하면 <code>gatsby-config</code>에 추가해주어야 합니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n};</code>\n        </deckgo-highlight-code>\n<p>그리고 개발 서버를 다시 시작해볼까요?</p>\n<p><strong>자, 이제 GraphiQL를 한번 볼까요?</strong></p>\n<p>그러면 탐색기 창에 다음 allFile과 file같은 선택 항목이 표시 되고 사용할 수 있습니다.</p>\n<p>이제 우리는 매우 멋진 작업을 수행할 수 있습니다 🧖🏻‍♂️</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">query MyQuery {\n  allFile {\n    edges {\n      node {\n        id\n        birthTime\n        base\n        accessTime\n        size\n        name\n      }\n    }\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>다음과 같은 쿼리를 작성해보고 실행시켜보면...</p>\n<deckgo-highlight-code json  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">{\n  &quot;data&quot;: {\n    &quot;allFile&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;b584a331-64ae-511b-b49e-d1304c0edcab&quot;,\n            &quot;birthTime&quot;: &quot;2021-04-26T05:30:47.727Z&quot;,\n            &quot;base&quot;: &quot;index.js&quot;,\n            &quot;accessTime&quot;: &quot;2021-04-26T06:48:38.997Z&quot;,\n            &quot;size&quot;: 411,\n            &quot;name&quot;: &quot;index&quot;\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;8f022b89-b764-5a5b-acea-b93b791db3b1&quot;,\n            &quot;birthTime&quot;: &quot;2021-04-26T05:49:49.274Z&quot;,\n            &quot;base&quot;: &quot;typography.js&quot;,\n            &quot;accessTime&quot;: &quot;2021-04-26T06:48:38.997Z&quot;,\n            &quot;size&quot;: 203,\n            &quot;name&quot;: &quot;typography&quot;\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;8259af0a-6322-538d-8904-98266c5b9add&quot;,\n            &quot;birthTime&quot;: &quot;2021-04-26T05:49:03.366Z&quot;,\n            &quot;base&quot;: &quot;about.js&quot;,\n            &quot;accessTime&quot;: &quot;2021-04-26T06:48:38.997Z&quot;,\n            &quot;size&quot;: 555,\n            &quot;name&quot;: &quot;about&quot;\n          }\n        },\n        {\n          &quot;node&quot;: {\n            &quot;id&quot;: &quot;25143b29-0290-5936-b875-4a86e96ee1d7&quot;,\n            &quot;birthTime&quot;: &quot;2021-04-26T05:48:47.157Z&quot;,\n            &quot;base&quot;: &quot;layout.js&quot;,\n            &quot;accessTime&quot;: &quot;2021-04-26T07:11:35.732Z&quot;,\n            &quot;size&quot;: 944,\n            &quot;name&quot;: &quot;layout&quot;\n          }\n        }\n      ]\n    }\n  },\n  &quot;extensions&quot;: {}\n}</code>\n        </deckgo-highlight-code>\n<p>이렇게, src내에 있는 파일들의 목록이 쫙 뜨게됩니다!</p>\n<h3>😎 얼마나 멋진가요!</h3>\n<p>이제 페이지를 하나 더 만들어봅시다.</p>\n<p><code>src/pages/my-files.js</code>를 만들어줍시다.</p>\n<p>그다음 소스코드를 다음과 같이 작성해줍시다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { graphql } from &quot;gatsby&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function MyFiles({ data }) {\n  console.log(data);\n  return &lt;Layout&gt;Hello World&lt;/Layout&gt;;\n}\n\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          id\n          birthTime(fromNow: true)\n          base\n          accessTime\n          size\n          name\n        }\n      }\n    }\n  }\n`;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116166564-422aae80-a739-11eb-8db4-44d7ecc9b53e.png\" alt=\"image\"></p>\n<p>잘 콘솔이 찍히나요?</p>\n<p>사실, 데이터를 가져오는 과정은 끝났는데, 여기서 끝나면 섭하니까 데이터를 HTML에 출력해보는 작업을 수행해보도록 하겠습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { graphql } from &quot;gatsby&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function MyFiles({ data }) {\n  console.log(data);\n  return (\n    &lt;Layout&gt;\n      &lt;div&gt;\n        &lt;h1&gt;My Site&#39;s Files&lt;/h1&gt;\n        &lt;table&gt;\n          &lt;thead&gt;\n            &lt;tr&gt;\n              &lt;th&gt;relativePath&lt;/th&gt;\n              &lt;th&gt;prettySize&lt;/th&gt;\n              &lt;th&gt;extension&lt;/th&gt;\n              &lt;th&gt;birthTime&lt;/th&gt;\n            &lt;/tr&gt;\n          &lt;/thead&gt;\n          &lt;tbody&gt;\n            {data.allFile.edges.map(({ node }, index) =&gt; (\n              &lt;tr key={index}&gt;\n                &lt;td&gt;{node.relativePath}&lt;/td&gt;\n                &lt;td&gt;{node.prettySize}&lt;/td&gt;\n                &lt;td&gt;{node.extension}&lt;/td&gt;\n                &lt;td&gt;{node.birthTime}&lt;/td&gt;\n              &lt;/tr&gt;\n            ))}\n          &lt;/tbody&gt;\n        &lt;/table&gt;\n      &lt;/div&gt;\n    &lt;/Layout&gt;\n  );\n}\n\nexport const query = graphql`\n  query {\n    allFile {\n      edges {\n        node {\n          birthTime(fromNow: true)\n          relativePath\n          prettySize\n          extension\n        }\n      }\n    }\n  }\n`;</code>\n        </deckgo-highlight-code>\n<p>자, 놀라지 마세요\n<img src=\"https://user-images.githubusercontent.com/48292190/116166844-d268f380-a739-11eb-94b6-818a9a1b7192.png\" alt=\"image\"></p>\n<h3>🤓 파일 시스템으로 이렇게 멋진 기능을 구현할 수 있습니다.</h3>\n<p>이제 여러분은 소스 플러그인이 개츠비의 데이터 시스템에 어떻게 데이터를 가져오는지를 배웠습니다.</p>\n<h1>🤖 Transformer 플러그인</h1>\n<p>이 부분은 정말 중요한 부분입니다. 만약 Gatsby로 정적 블로그를 만들 예정에 있다면 이 부분을 정말 유심히 봐야할것입니다.\n<em>참고로 저도 기술블로그를 만들기 위해 Gatsby를 배우는 것입니다.</em></p>\n<p>Transformer 플러그인은 소스 플러그인이 가져온 원시 콘텐츠를 변환하는 플러그인입니다. 무슨 말인지 잘 모르시겠다구요? 한번 천천히 살펴보자구요.</p>\n<p><code>src/pages/sweet-pandas-eating-sweets.md</code>을 만들어줍시다.\n그 다음 <code>/my-files</code>페이지를 확인해볼까요?</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116168562-a7809e80-a73d-11eb-8bd5-0152261df96e.png\" alt=\"image\"></p>\n<p><code>gatsby-source-filesystem</code>은 항상 추가 할 새 파일을 검색하고 추가 할 때 쿼리를 다시 실행합니다.</p>\n<blockquote>\n<p>매우 강력하다구요!</p>\n</blockquote>\n<p>Transformer 플러그인?</p>\n<h2>🤨 뭔진 몰라도 일단 따라해보면서 배웁시다!</h2>\n<p><code>gatsby-transformer-remark</code>를 다운받아봅시다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">yarn add gatsby-transformer-remark</code>\n        </deckgo-highlight-code>\n<p>그 다음 <code>gatsby-config</code>에 뭘 해주어야하는지 알겠죠?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">module.exports = {\n  siteMetadata: {\n    title: `Pandas Eating Lots`,\n  },\n  plugins: [\n    {\n      resolve: `gatsby-source-filesystem`,\n      options: {\n        name: `src`,\n        path: `${__dirname}/src/`,\n      },\n    },\n    `gatsby-transformer-remark`,\n    `gatsby-plugin-emotion`,\n    {\n      resolve: `gatsby-plugin-typography`,\n      options: {\n        pathToConfigModule: `src/utils/typography`,\n      },\n    },\n  ],\n};</code>\n        </deckgo-highlight-code>\n<p>이 작업을 완료해줬다면 개발서버를 다시 켜봅시다.\n<img src=\"https://user-images.githubusercontent.com/48292190/116168827-4ad1b380-a73e-11eb-8e9d-4ab8119daec6.png\" alt=\"image\"></p>\n<p>그러면 <code>http://localhost:8000/___graphql</code>\n한번 확인을 해보면 <code>allMarkdownRemark</code>가 추가됩니다.</p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">{\n  allMarkdownRemark {\n    edges {\n      node {\n        frontmatter {\n          title\n          date\n        }\n        html\n        excerpt\n        timeToRead\n      }\n    }\n  }\n}</code>\n        </deckgo-highlight-code>\n<p>다음 작업을 수행한 후 한번 보세요!</p>\n<deckgo-highlight-code json  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">{\n  &quot;data&quot;: {\n    &quot;allMarkdownRemark&quot;: {\n      &quot;edges&quot;: [\n        {\n          &quot;node&quot;: {\n            &quot;frontmatter&quot;: {\n              &quot;title&quot;: &quot;Sweet Pandas Eating Sweets&quot;,\n              &quot;date&quot;: &quot;2017-08-10&quot;\n            },\n            &quot;html&quot;: &quot;&lt;p&gt;Pandas are really sweet.&lt;/p&gt;\\n&lt;p&gt;Here&#39;s a video of a panda eating sweets.&lt;/p&gt;\\n&lt;iframe width=\\&quot;560\\&quot; height=\\&quot;315\\&quot; src=\\&quot;https://www.youtube.com/embed/4n0xNbfJLR8\\&quot; frameborder=\\&quot;0\\&quot; allowfullscreen&gt;&lt;/iframe&gt;&quot;,\n            &quot;excerpt&quot;: &quot;Pandas are really sweet. Here&#39;s a video of a panda eating sweets.&quot;,\n            &quot;timeToRead&quot;: 1\n          }\n        }\n      ]\n    }\n  },\n  &quot;extensions&quot;: {}\n}</code>\n        </deckgo-highlight-code>\n<p>정말 멋있지 않나요? 마크다운으로 작업한 내용이 html으로 <code>Transform</code>되었습니다!</p>\n<blockquote>\n<p>소스 플러그인은 데이터 를 Gatsby의 데이터 시스템으로 가져오고 변환기 플러그인은 소스 플러그인에서 가져온 원시 콘텐츠를 변환합니다</p>\n</blockquote>\n<p><code>pages/index.js</code>에서 graphql작업을 해봅시다.\n어렵지 않아요!</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { graphql } from &quot;gatsby&quot;;\nimport { css } from &quot;@emotion/react&quot;;\nimport { rhythm } from &quot;../utils/typography&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function Home({ data }) {\n  console.log(data);\n  return (\n    &lt;Layout&gt;\n      &lt;div&gt;\n        &lt;h1\n          css={css`\n            display: inline-block;\n            border-bottom: 1px solid;\n          `}\n        &gt;\n          Amazing Pandas Eating Things\n        &lt;/h1&gt;\n        &lt;h4&gt;{data.allMarkdownRemark.totalCount} Posts&lt;/h4&gt;\n        {data.allMarkdownRemark.edges.map(({ node }) =&gt; (\n          &lt;div key={node.id}&gt;\n            &lt;h3\n              css={css`\n                margin-bottom: ${rhythm(1 / 4)};\n              `}\n            &gt;\n              {node.frontmatter.title}{&quot; &quot;}\n              &lt;span\n                css={css`\n                  color: #bbb;\n                `}\n              &gt;\n                — {node.frontmatter.date}\n              &lt;/span&gt;\n            &lt;/h3&gt;\n            &lt;p&gt;{node.excerpt}&lt;/p&gt;\n          &lt;/div&gt;\n        ))}\n      &lt;/div&gt;\n    &lt;/Layout&gt;\n  );\n}\n\nexport const query = graphql`\n  query {\n    allMarkdownRemark {\n      totalCount\n      edges {\n        node {\n          id\n          frontmatter {\n            title\n            date(formatString: &quot;DD MMMM, YYYY&quot;)\n          }\n          excerpt\n        }\n      }\n    }\n  }\n`;</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116169258-4d80d880-a73f-11eb-9e36-1ce3e62a5725.png\" alt=\"image\"></p>\n<p>음... 포스트가 하나라서 조금 없어보이네요! 포스트를 더 추가해보도록 하겠습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116169350-828d2b00-a73f-11eb-9c1b-ac953c8077cf.png\" alt=\"image\"></p>\n<h4>저장하면 바로 적용되는 모습이 정말 매력적입니다.</h4>\n<p>하지만 저는 포스트의 순서를 조금 바꾸고싶습니다...</p>\n<p><strong>다행히! 어려운 작업은 아니죠!</strong></p>\n<deckgo-highlight-code   terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"undefined\">\n          <code slot=\"code\">{\n  allMarkdownRemark(sort: {order: DESC, fields: [frontmatter___date]}) {\n    totalCount\n    edges {\n      node {\n        id\n        frontmatter {\n          title\n          date(formatString: &quot;DD MMMM, YYYY&quot;)\n        }\n        excerpt\n      }\n    }\n  }\n}\n</code>\n        </deckgo-highlight-code>\n<p>쿼리를 다음과 같이 바꿔주면 desc정렬을 해줍니다!</p>\n<h3>여러분은 여러분만의 블로그를 만들 준비가 다 되었습니다!</h3>\n<p>하지만 조금만 더 파볼까요? 그러면 <strong>멋진 블로그</strong>가 만들어질것 같습니다!</p>\n<h2>🔥 데이터로부터 페이지 생성</h2>\n<p>이전에는 마크 다운 파일을 쿼리하고 블로그 게시물 제목 및 발췌 목록을 생성하는 멋진 인덱스 페이지를 만들었습니다.</p>\n<p>하지만 발췌한 부분과 포스트를 누르면 마크다운의 실제 페이지를 만들고싶을때는 어떻게 해야할까요?</p>\n<h3>페이지용 슬러그 만들기</h3>\n<p><code>슬러그</code>라는 개념, 좀 생소하시죠? 한번 알아봅시다.\n공식 문서에서 <code>https://www.gatsbyjs.com/docs/tutorial/part-seven/</code>라는 주소가 있다고 해봅시다.\n그러면 여기서 <code>슬러그</code>는 <strong>/docs/tutorial/part-seven/</strong>\n이 부분입니다.</p>\n<p>무슨 느낌인지 아시겠죠? <strong>웹 주소의 고유한 식별 부분입니다</strong></p>\n<p>그러면 새 페이지를 만드는데에는 두단계의 방법이 있습니다.</p>\n<blockquote>\n<ol>\n<li>페이지에 대한 \"경로\"또는 \"슬러그\"를 생성합니다.</li>\n<li>페이지를 만듭니다.</li>\n</ol>\n</blockquote>\n<p><code>gatsby-node.js</code>라는 파일을 루트에 만들어볼까요?\n그 다음 코드를 작성해주세요.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">exports.onCreateNode = ({ node }) =&gt; {\n  console.log(`Node created of type &quot;${node.internal.type}&quot;`);\n};</code>\n        </deckgo-highlight-code>\n<p>이 onCreateNode는 새 노드가 생성 (또는 업데이트) 될 때마다 Gatsby에 의해 호출됩니다.</p>\n<p><strong>이제 개발 서버를 종료한 후, 다시 시작해보세요.</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116171414-b0746e80-a743-11eb-87c3-fe37c0bb674b.png\" alt=\"image\"></p>\n<p>자 콘솔창에 Node created머시기가 뜨죠?\n여기서 우리는 <code>MarkdownRemark</code>노드만 기록하고 싶습니다.</p>\n<p>그러면 조건문을 다음과 같이 작성해주셔야 합니다.\n<img src=\"https://user-images.githubusercontent.com/48292190/116171563-f7fafa80-a743-11eb-9176-0c8e52ef32c1.png\" alt=\"image\"></p>\n<p>MarkdownRemark가 두번 생성되었다는걸 알 수 있습니다.</p>\n<p>이제 마크다운의 파일이름을 사용하여 페이지 슬러그를 만들어보는 작업을 수행해보도록 하겠습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">exports.onCreateNode = ({ node, getNode }) =&gt; {\n  if (node.internal.type === `MarkdownRemark`) {\n    const fileNode = getNode(node.parent);\n    console.log(`\\n`, fileNode.relativePath);\n  }\n};</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116178336-54fcad80-a750-11eb-8bcd-5086f9870018.png\" alt=\"image\"></p>\n<p>이렇게 하면 파일의 이름을 가져올 수 있습니다.\n<code>gatsby-source-filesystem</code>플러그인에는 슬러그를 만드는 기능이 함께 제공됩니다</p>\n<p>어렵지 않으니 한번 해볼까요?</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const { createFilePath } = require(`gatsby-source-filesystem`);\n\nexports.onCreateNode = ({ node, getNode }) =&gt; {\n  if (node.internal.type === `MarkdownRemark`) {\n    console.log(createFilePath({ node, getNode, basePath: `pages` }));\n  }\n};</code>\n        </deckgo-highlight-code>\n<p>이렇게 작성하면 슬러그가 자동으로 생성된 것을 볼 수 있죠?\n<strong>이제 새 슬러그를 MarkdownRemark노드에 직접 추가 할 수 있습니다 .</strong></p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116334772-bc7a3200-a810-11eb-9297-b2d85df5c0b4.png\" alt=\"image\"></p>\n<p><code>createNodeField</code>를 사용하면 이를 더욱 쉽게 구현할 수 있습니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const { createFilePath } = require(`gatsby-source-filesystem`);\n\nexports.onCreateNode = ({ node, getNode, actions }) =&gt; {\n  const { createNodeField } = actions;\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` });\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    });\n  }\n};</code>\n        </deckgo-highlight-code>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116335242-7a9dbb80-a811-11eb-9bd6-42453fdad513.png\" alt=\"image\"></p>\n<p>그러면 노드필드에 slug라는 이름의 필드를 만들어줍니다.</p>\n<p>이제 다음과 같은 작업을 수행해줍시다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const { createFilePath } = require(`gatsby-source-filesystem`);\n\nexports.onCreateNode = ({ node, getNode, actions }) =&gt; {\n  const { createNodeField } = actions;\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` });\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    });\n  }\n};\n\nexports.createPages = async ({ graphql, actions }) =&gt; {\n  // **Note:** graphql은 Promise를 리턴합니다.\n  const result = await graphql(`\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n  console.log(JSON.stringify(result, null, 4));\n};</code>\n        </deckgo-highlight-code>\n<p>그러면 콘솔창에</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116335527-fc8de480-a811-11eb-9cab-1730b460cdea.png\" alt=\"image\"></p>\n<p>정상적으로 잘 나오는것을 확인할 수 있죠?</p>\n<p><strong>아까도 설명했지만, 페이지를 만드는 단계는</strong></p>\n<ol>\n<li>GraphQL로 데이터 쿼리</li>\n<li>쿼리 결과를 페이지에 매핑</li>\n</ol>\n<p><strong>입니다</strong></p>\n<p>자, 따라해보세요\n<code>src/templates</code>를 만들고 <code>blog-post.js</code> 파일을 추가합시다.</p>\n<p>다음과 같이 작성합니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function BlogPost() {\n  return (\n    &lt;Layout&gt;\n      &lt;div&gt;Hello Blog Post&lt;/div&gt;\n    &lt;/Layout&gt;\n  );\n}</code>\n        </deckgo-highlight-code>\n<p>그 다음 <code>gatsby-node.js</code>를 업데이트 해줍니다.</p>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">const path = require(`path`);\nconst { createFilePath } = require(`gatsby-source-filesystem`);\n\nexports.onCreateNode = ({ node, getNode, actions }) =&gt; {\n  const { createNodeField } = actions;\n  if (node.internal.type === `MarkdownRemark`) {\n    const slug = createFilePath({ node, getNode, basePath: `pages` });\n    createNodeField({\n      node,\n      name: `slug`,\n      value: slug,\n    });\n  }\n};\n\nexports.createPages = async ({ graphql, actions }) =&gt; {\n  const { createPage } = actions;\n  const result = await graphql(`\n    query {\n      allMarkdownRemark {\n        edges {\n          node {\n            fields {\n              slug\n            }\n          }\n        }\n      }\n    }\n  `);\n\n  result.data.allMarkdownRemark.edges.forEach(({ node }) =&gt; {\n    createPage({\n      path: node.fields.slug,\n      component: path.resolve(`./src/templates/blog-post.js`),\n      context: {\n        // Data passed to context is available\n        // in page queries as GraphQL variables.\n        slug: node.fields.slug,\n      },\n    });\n  });\n};</code>\n        </deckgo-highlight-code>\n<h3>🤨자... 많이 지루하셨죠?</h3>\n<p>이제 gatsby의 404페이지로 한번 가봅시다.</p>\n<blockquote>\n<h2>404페이지를 어떻게가요?</h2>\n<p>주소창에 <code>http://localhost:8000/sdf</code>처럼 그냥 아무런 슬러그가 없는 주소로 들어가시면 gatsby에서 자동으로 404페이지로 이동시켜줍니다.</p>\n</blockquote>\n<p>들어가보면 어떤화면이 보이시나요?</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116336812-28aa6500-a814-11eb-90c4-9b93014ae4a9.png\" alt=\"image\"></p>\n<p>네...! 우리가 아까 만들었던 .md파일들이 전부 page로 바뀐모습을 볼 수 있죠?</p>\n<p>하지만 페이지에 들어가보면 아직 우리가 원하는 내용은 아닙니다! 왜냐하면...</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116336911-4d9ed800-a814-11eb-8875-f1da75c06bbf.png\" alt=\"image\"></p>\n<p>아직 제목,내용을 적지 않았거든요!</p>\n<p>우리가 데이터를 가져올땐 무엇을 사용한다고 했죠?</p>\n<h3>그렇죠! 바로 <code>GraphQL</code>입니다 🤗</h3>\n<deckgo-highlight-code js  terminal=\"carbon\" theme=\"panda\"  highlight-lines=\"\">\n          <code slot=\"code\">import React from &quot;react&quot;;\nimport { graphql } from &quot;gatsby&quot;;\nimport Layout from &quot;../components/layout&quot;;\n\nexport default function BlogPost({ data }) {\n  const post = data.markdownRemark;\n  return (\n    &lt;Layout&gt;\n      &lt;div&gt;\n        &lt;h1&gt;{post.frontmatter.title}&lt;/h1&gt;\n        &lt;div dangerouslySetInnerHTML={{ __html: post.html }} /&gt;\n      &lt;/div&gt;\n    &lt;/Layout&gt;\n  );\n}\n\nexport const query = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      frontmatter {\n        title\n      }\n    }\n  }\n`;</code>\n        </deckgo-highlight-code>\n<p>이제 페이지에 들어가보면</p>\n<h3>😋 와우!! 드디어 기능을 구현했네요!</h3>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116337427-0b29cb00-a815-11eb-9040-7caf850920b5.png\" alt=\"image\"></p>\n<h1>😁축하해요! Gatsby로 정적블로그를 만드는데에 성공했어요!</h1>\n<p><strong>당신이 배운 것들</strong></p>\n<ul>\n<li>새로운 Gatsby 사이트 생성</li>\n<li>페이지 및 구성 요소 만들기</li>\n<li>스타일 구성 요소</li>\n<li>사이트에 플러그인 추가</li>\n<li>데이터 소스 및 변환</li>\n<li>GraphQL을 사용하여 페이지 데이터 쿼리</li>\n<li>프로그래밍 방식으로 데이터에서 페이지 만들기</li>\n</ul>\n<p>이제 몇몇개 알면 좋은것들을 소개해드릴게요.</p>\n<ul>\n<li><strong>Lighthouse</strong></li>\n</ul>\n<blockquote>\n<p>개츠비 개발 서버는 개발 속도를 높이도록 최적화되어 있지만 사이트의 프로덕션 버전과 매우 유사하지만 생성하는 사이트는 최적화되어 있지 않습니다.</p>\n</blockquote>\n<ol>\n<li>만약 아직 실행중인 경우 개발서버를 종료하고 <code>gatsby build</code>를 합니다.</li>\n<li><code>gatsby serve</code>로 프로덕션 사이트를 로컬서버로 봅니다.</li>\n</ol>\n<p><code>http://localhost:9000/</code>에 서버가 열립겁니다.</p>\n<p><strong>이제 첫 번째 Lighthouse 테스트를 실행해봅시다.</strong></p>\n<p>먼저 chrome웹스토어에서 LightHouse를 다운받습니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116339666-cc960f80-a818-11eb-900e-9297b6ca3eae.png\" alt=\"image\"></p>\n<p>이제 개발자도구를 사용해서 LightHouse탭을 켭니다.</p>\n<p>그 다음 <code>Generate report</code>를 누른다음 검사를 진행합니다.</p>\n<p><img src=\"https://user-images.githubusercontent.com/48292190/116340046-71b0e800-a819-11eb-85a7-b8e41028a7e0.png\" alt=\"image\"></p>\n<p>이렇게, 결과가 잘 뜨나요?</p>\n<h1>🖐🖐자, 이제 여러분들의 차례입니다!</h1>\n<p>여기까지 보신분들, 수고하셨습니다...</p>\n<p>이제 gatsby는 여러분들의 것이니까 여러분이 만들고 싶은 웹사이트를 제작해보세요!</p>\n<p>그럼 이만...</p>\n<p>2021-04-28(수)</p>\n<p>Hong-JunHyeok</p>","frontmatter":{"title":"💜 개츠비란 무엇인가?","profile":"https://avatars.githubusercontent.com/u/48292190?v=4","name":"홍준혁","createdAt":"2021년 4월 29일"}}},"pageContext":{"slug":"/blog/what_is_gatsby/"}},"staticQueryHashes":[]}